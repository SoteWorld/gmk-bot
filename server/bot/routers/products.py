from aiogram import Router, F
from aiogram.types import CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder

from server.services.data_provider import DataProvider
from server.constants import ITEMS_PER_PAGE

router = Router(name="products")
provider = DataProvider()

# Mapping of internal category codes to user-friendly Russian names
CATEGORY_TRANSLATIONS = {
    "fresh": "üÜï –ù–æ–≤–∏–Ω–∫–∏",
    "sausages": "üå≠ –°–æ—Å–∏—Å–∫–∏ –∏ —Å–∞—Ä–¥–µ–ª—å–∫–∏",
    "smoked_meats": "üçñ –ö–æ–ø—á–µ–Ω–æ—Å—Ç–∏",
    "boiled_sausage": "ü•™ –í–∞—Ä–µ–Ω—ã–µ –∫–æ–ª–±–∞—Å—ã",
    "boiled_sausages": "ü•™ –í–∞—Ä–µ–Ω—ã–µ –∫–æ–ª–±–∞—Å—ã",
    "cooked-smoked_semi-smoked": "ü•ì –í/–ö –∫–æ–ª–±–∞—Å—ã, –ø–æ–ª—É–∫–æ–ø—á–µ–Ω—ã–µ –∫–æ–ª–±–∞—Å—ã",
    "semi_finished": "üç≥ –ü–æ–ª—É—Ñ–∞–±—Ä–∏–∫–∞—Ç—ã",
    "dumplings": "ü•ü –ü–µ–ª—å–º–µ–Ω–∏",
    "other": "üç≤ –ü—Ä–æ—á–∏–µ –∏–∑–¥–µ–ª–∏—è",
    "raw-smoked_dry-cured": "üç¢ –°—ã—Ä–æ–∫–æ–ø—á–µ–Ω—ã–µ, —Å—ã—Ä–æ–≤—è–ª–µ–Ω—ã–µ –∫–æ–ª–±–∞—Å—ã",
    "raw-smoked_dry-cyred": "üç¢ –°—ã—Ä–æ–∫–æ–ø—á–µ–Ω—ã–µ, —Å—ã—Ä–æ–≤—è–ª–µ–Ω—ã–µ –∫–æ–ª–±–∞—Å—ã",
}

@router.callback_query(F.data == "products")
async def choose_category(call: CallbackQuery) -> None:
    categories = await provider.list_categories()
    if not categories:
        await call.answer("üòî –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö", show_alert=True)
        return

    builder = InlineKeyboardBuilder()
    for cat in categories:
        text = CATEGORY_TRANSLATIONS.get(cat, cat)
        builder.button(text=text, callback_data=f"category:{cat}")
    builder.adjust(1)

    await call.message.edit_text(
        "üìÇ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é –≤–∞—Å –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–æ–≤:",
        reply_markup=builder.as_markup(),
    )
    await call.answer()




@router.callback_query(F.data.startswith("category:"))
async def list_products(call: CallbackQuery) -> None:
    data_parts = call.data.split(":")
    category = data_parts[1]
    page = int(data_parts[2]) if len(data_parts) > 2 else 1

    products = await provider.list_products_by_category(category)
    if not products:
        await call.answer("üòî –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö", show_alert=True)
        return

    start = (page - 1) * ITEMS_PER_PAGE
    end = start + ITEMS_PER_PAGE
    page_products = products[start:end]

    text_parts = []
    for idx, product in enumerate(page_products, start=start + 1):
        part = f"<b>{idx}. {product.name}</b>"
        if product.ingredients:
            part += f"\nüçñ –°–æ—Å—Ç–∞–≤: {product.ingredients}"
        if product.expiration_date:
            part += f"\n‚è≥ –°—Ä–æ–∫ –≥–æ–¥–Ω–æ—Å—Ç–∏: {product.expiration_date}"
        text_parts.append(part)

    builder = InlineKeyboardBuilder()
    show_prev = page > 1
    show_next = end < len(products)
    if show_prev:
        builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"category:{category}:{page - 1}")
    if show_next:
        builder.button(text="–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è", callback_data=f"category:{category}:{page + 1}")
    builder.button(text="üè† –ì–ª–∞–≤–Ω–æ–µ –ú–µ–Ω—é", callback_data="menu")

    if show_prev and show_next:
        builder.adjust(2, 1)
    elif show_prev or show_next:
        builder.adjust(1, 1)
    else:
        builder.adjust(1)

    await call.message.edit_text(
        "\n\n".join(text_parts), parse_mode="HTML", reply_markup=builder.as_markup()
    )
    await call.answer()
